#!/usr/bin/env python

from __future__ import print_function
import pwd
import os
import sys
from optparse import OptionParser
from cagen import CA, CertException

def main():
    p = OptionParser('%prog [options]',
                     version='%prog ##VERSION##',
                     description='Generate or load pre-existing DigiCert-like ' + \
                     'CAs for testing OSG software.')

    p.add_option('-e', '--expire-days', default=10, type='int', dest='days', metavar='DAYS',
                 help='The number of days before test CAs or certificates expire')
    p.add_option('-f', '--force', action='store_true', default=False, dest='force',
                 help='Overwrite any existing CAs or certificates')
    p.add_option('--host', action='store_true', default=False, dest='host',
                 help='Create a host certificate using the test CA')
    p.add_option('-u', '--user', default='', dest='username',
                 help='Create a user certificate for the specified user using the test CA')
    p.add_option('-p', '--pass', default='', dest='password',
                 help='Set the user certificate\'s password')
    p.add_option('-v', '--voms', default='', dest='voms', metavar='VO',
                 help='Create files for Virtual Organization, VO')
    p.add_option('--crl', action='store_true',
                 help='Create a CRL for the test CA')
    opts, _ = p.parse_args()

    if opts.password and not opts.username:
        sys.exit('Missing user option')
    elif opts.username and not opts.password:
        sys.exit('Missing or empty password option')

    # Create or load a pre-existing CA
    test_ca = CA('/DC=org/DC=opensciencegrid/C=US/O=OSG Software/CN=OSG Test CA', opts.days, opts.force)

    if opts.voms:
        test_ca.voms(opts.voms)

    if test_ca.created:
        ca_msg_verb = 'Created'
    else:
        ca_msg_verb = 'Loaded'
    print('%s CA at %s...' % (ca_msg_verb, test_ca.path))

    if opts.host:
        # Create hostcert
        host_path = '/etc/grid-security/hostcert.pem'
        if not os.path.exists(host_path) or opts.force:
            print('Writing host cert to %s...' % host_path)
            test_ca.hostcert(opts.days)
        else:
            print('Skipped writing host cert due to existing cert at %s' % host_path)

    if opts.username:
        # Create user cert
        try:
            user = pwd.getpwnam(opts.username)
        except KeyError:
            sys.exit('User %s does not exist' % opts.username)
        user_path = os.path.join(user.pw_dir, '.globus', 'usercert.pem')
        if not os.path.exists(user_path) or opts.force:
            print('Writing user cert to %s...' % user_path)
            test_ca.usercert(opts.username, opts.password, opts.days)
        else:
            print('Skipped writing user cert due to existing cert at %s' % user_path)

    if opts.crl:
        test_ca.crl(opts.days)

if __name__ == '__main__':
    try:
        main()
    except (RuntimeError, CertException) as exc:
        sys.exit('ERROR: ' + str(exc))
